image: python:latest

variables:
  NOTEBOOK_FOLDER: '/gitlab_ci_runs/'
  NOTEBOOK_NAME: 'git-redis-databricks-connector'

stages:
  - test

Databricks-Git connection test:
  stage: test
  environment: dev
  script:
      - |
        echo "Install databricks cli"
        pip install databricks-cli

        echo "Install jq"
        mkdir -p ~/bin && curl -sSL -o ~/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64 && chmod +x ~/bin/jq
        export PATH=$PATH:~/bin
        jq --version

        
        echo "Run databricks notebook"
        
        echo "Write token to a file"
        echo $DATABRICKS_ACCESS_TOKEN > databricks_token.txt
        
        echo "Configure databricks"
        databricks configure --host $DATABRICKS_HOST -f databricks_token.txt

        echo "Call databricks cp"
        databricks fs cp notebooks/ dbfs:${NOTEBOOK_FOLDER} --recursive --overwrite

        echo "Create databricks workspace"
        databricks workspace import_dir notebooks/ ${NOTEBOOK_FOLDER} -o

        CREATE_JSON="{
          \"name\": \"Gitlab_CI_Run\",
          \"existing_cluster_id\": \"$DATABRICKS_CLUSTER_ID\",
          \"timeout_seconds\": 3600,
          \"max_retries\": 1,
          \"notebook_task\": {
            \"notebook_path\": \"${NOTEBOOK_FOLDER}${NOTEBOOK_NAME}\",
            \"base_parameters\": {
              \"PipelineParam\": \"From Git lab - $CI_BUILD_ID\"
            }
          }
        }"


        echo "CREATE_JSON"
        echo $CREATE_JSON

        echo "Creating a databricks job"
        JOB_ID=$(databricks jobs create --json "$CREATE_JSON" | jq '.job_id')
        echo $JOB_ID

        echo "Running the databricks job"
        RUN_ID=$(databricks jobs run-now --job-id $JOB_ID | jq '.run_id')
        echo $RUN_ID

        JOB_STATUS="PENDING"
        while [ $JOB_STATUS = "RUNNING" ] || [ $JOB_STATUS = "PENDING" ]
        do
          sleep 2
          JOB_STATUS=$(databricks runs get --run-id $RUN_ID | jq -r '.state.life_cycle_state')
          echo Status $JOB_STATUS
        done
      
        echo "Done!!!!!"
        
  tags:
    - gitlabrunner
